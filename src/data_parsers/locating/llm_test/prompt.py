import pymysql
import sqlalchemy as db
import pandas as pd
from neo4j import GraphDatabase, basic_auth

def wrong_answer_reasoning(gold_answer, prompt):

    return_prompt = """LLM make answer: {1}
    gold answer: {0}
    
    why? explain it.""".format(gold_answer, prompt)

    return return_prompt

def situation(mode = "eu4"):
    
    if mode == "eu4":
        situation = """
Money in this global trade network can flow between trade nodes in unidirectional trade routes as well as terminate at end nodes.
Trade value represents the monthly sum of locally produced and incoming trade goods in a trade node. 
Trade power is a number representing a country's control over trade in a node. The trade power of a country as a proportion of the total trade power of all countries present in the node determines what will happen to the trade value in each node. Power is used either to retain trade value within the node (if the nation is collecting with a merchant or at its home node), or to transfer it forward in the trade network (if the nation is steering from there with a merchant, or it's not its home node and it has no merchant). Trade power is generated by provinces, light ships, and merchants.
Merchants can be sent to a trade node to collect a portion of the node's trade value proportional to the nation's share of trade power in the node, or steer the node's trade value in a particular direction.
In the absence of merchants, countries collect trade in their home node, have no influence on trade flow in non-home nodes not upstream from their trade collection, and pull trade forward in all other nodes to increase the transferred trade value.
Merchants can be sent on missions to collect trade, retaining it as income, or to steer trade to influence its flow. Sending merchants to nodes other than the home node incurs a penalty to trade power.

    """
    return situation

def strategy(mode="eu4"):
    if mode == "eu4":
        strategy = """
==========
These are the famous strategy to raise overall profit.
1. It is highly encoraged to place merchants on directly connected nodes.
2. It is advantageous to place merchants on nodes with high local value. 
    """
    return strategy

def question(country, home, examples, year="1444", anony=False):


    if anony:
        country = anonymize(country, mode="CCODE")
        home = anonymize(home, mode="N")
        examples = [anonymize(e, mode="N") for e in examples]

    examples_text = ""
    count = 1
    for example in examples:
        examples_text = examples_text + "{}. {}\n".format(count,example)
        count = count+1


    
    question = """
================
<Question>

Assume that you are the ruler of the country named country_code "{0}". You and your competitions are on the system of trade in node_name {3}.
You have one merchant to work on trade system. Our home node is node_name "{1}". Note that my goal is maximizing my profit on "{1}".

where should I alocate my merchant to steer trade to "{1}"? You must choose your option based on choices on below. 

{2}

What is the answer and reason?
    
    """.format(country, home, examples_text, year)
    
    
    return question


def db_gen(home, examples, year, anony=False):
    
    anony_home = anonymize(home, mode="N")
    
    rdb_text = """
    
general table: current node values
    """
    rdb_target = "eu4_{}_anony".format(year)

    engine = db.create_engine('mysql+pymysql://root:infolab1234@localhost/{}'.format(rdb_target))
    connection = engine.connect()

    # eu4_db = pymysql.connect(
    #     user='root',
    #     passwd='infolab1234', # 깃에 올릴때는 삭제해야 함
    #     host="127.0.0.1",
    #     db=rdb_target,
    #     charset = 'utf8'
    #     )
    driver = GraphDatabase.driver(
        uri=f"bolt://localhost:7687",
        auth=basic_auth(
            user="neo4j",
            password = "infolab1234"
        )
    )


    # hard_coding - four examples only.
    general_table_query = "select name,current,local_value,outgoing,steer_power,retention_ from general where name=\"{}\" or name=\"{}\" or name=\"{}\" or name=\"{}\";".format(examples[0], examples[1], examples[2], examples[3])
    
    
    general_df = pd.read_sql_query(sql=general_table_query, con=connection)


    if anony:
        general_df["name"]=[anonymize(node, mode="N") for node in general_df["name"]]

    rdb_text = rdb_text + "{}\n\n".format(general_df)
    
    count = 1
    for example in examples:
        table_queries = "select country_code,val from trading where node_name=\'{}\';".format(example)
        
        node_table_df=pd.read_sql(sql=table_queries, con=connection)
        if anony:
            anony_example = anonymize(example, mode="N")
            node_table_df["country_code"] = [anonymize(i, mode="CCODE") for i in node_table_df["country_code"]] 

        else:
            anony_example = example
        
        rdb_text = rdb_text + "node name {1} (node {0})\n".format(count, anony_example)+"{}\n\n".format(node_table_df)
        count = count+1
    
    gdb_query = """match (a)-->(b {{name:\"{}\"}}) return a.name""".format(home)    
    anony_gdb_query = """match (a)-->(b {{name:\"{}\"}}) return a.name""".format(anonymize(home, mode="N"))

    records, summary, keys = driver.execute_query(gdb_query, database_="eu4anony")

    gdb_text = ""
    # if anony:
    #     gdb_text = "neo4j@neo4j> "+ anony_gdb_query
    # else:
    #     gdb_text = "neo4j@neo4j> "+ gdb_query    
    
    
    connected_list = []
    for rec in records:
        data = rec.data()
        
        if anony:
            data["a.name"] = anonymize(data["a.name"], mode="N")
        
        connected_list.append(data["a.name"])
        #gdb_text += "{}\n".format(data)
    
    gdb_text += "{}\n".format(connected_list)
    
    
    prompt = """
==========
Following is the current node situation.
val=trade power.
current=current money value on each node
retention=ratio of trade value which cannot steer to other nodes. low retention means easy to move.

{0}

following nodes are directly connected to {2}, our home node.

{1}
    """.format(rdb_text,gdb_text, anony_home)
    
    
    driver.close()
    return prompt

def IOwR(mode = "right"):
    if mode == "wrong":
        return """
================
Following is the example answer 

<Question>

Assume that you are the ruler of the country named "Porugal". You and your competitions are on the system of trade in 1444.
You have one merchant to work on trade system. Our home node is "Sevilla"

where should I alocate my merchant to steer trade to "sevilla"? You must choose your option based on choices on below. Note that my goal is maximizing my profit on "sevilla".

1. safi
2. chesapeake_bay
3. kongo
4. carribean_trade

What is the answer?

Gold answer: safi

Wrong answer: The best option for maximizing profit on "Sevilla" is to allocate the merchant to the node with the highest local value, which in this case is "Kongo". This will allow Portugal to collect the most trade value from the node and steer it towards "Sevilla".

Reason: 
The best option for maximizing profit on "Sevilla" is to allocate the merchant to the node with the highest local value and the most direct connection to "Sevilla", which in this case is "Safi". This will allow Portugal to collect the most trade value from the node and steer it towards "Sevilla", while avoiding the penalty for steering from a node that is not directly connected to "Sevilla". 
"""
    elif mode == "right":
        return """

================
Following is the example question and answer 

<Question>

Assume that you are the ruler of the country named "Ottomans" (TUR). You and your competitions are on the system of trade in 1444.
You have one merchant to work on trade system. Our home node is "constantinople"

where should I alocate my merchant to steer trade to "constantinople"? You must choose your option based on choices on below. Note that my goal is maximizing my profit on "constantinople".

1. aleppo
2. alexandria
3. crimea
4. ragusa

Gold answer: alexandria

LLM made answer: alexandria

Reason:
Alexandria has the highest local value of all the nodes, and it is directly connected to Constantinople. Placing a merchant in Alexandria will allow you to steer the most trade value to Constantinople, maximizing your profit. Alexandria also has the highest steer power of all the nodes, meaning that it will be able to transfer the most trade value to Constantinople. Additionally, Alexandria has the highest retention power of all the nodes, meaning that it will be able to retain the most trade value in Constantinople.

"""


# Anony rules
# country (code): CCODE, node: N, 
anonyDict = {} # 원래 이름을 anony 로 바꾸는 테이블
deanonyDict = {} # anony 를 원래 이름으로 바꾸는 테이블 
anonyCountDict = {}

def anonymize(input, mode=None):
    import random, string
    
    global anonyDict
    global deanonyDict
    global anonyCountDict
    
    if mode not in anonyCountDict.keys():
        anonyCountDict[mode] = 0
        anonyCount = anonyCountDict[mode]
    else:
        anonyCount = anonyCountDict[mode]

    
    if input in anonyDict.keys():
        return anonyDict[input]

    if mode==None:
        alphabet = random.choice(string.ascii_letters)
        alphabet = alphabet.upper()
    else:
        alphabet = mode.upper()
    anonyString = "{}{}".format(alphabet, anonyCount)
    
    anonyDict[input] = anonyString
    deanonyDict[anonyString] = input
    anonyCountDict[mode] = anonyCountDict[mode] + 1
    
    return anonyString


def deanonymize(anony):
    global deanonyDict
    
    return deanonyDict[anony]

def anonyTable():
    global anonyDict
    return anonyDict
